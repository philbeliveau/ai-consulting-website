generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  subscription  SubscriptionStatus @default(FREE)
  accounts      Account[]
  sessions      Session[]
  notes         Note[]
  questions     Question[]
  progress      CourseProgress[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  content     String?  @db.Text
  isPublished Boolean  @default(false)
  price       Float?
  folders     Folder[]
  progress    CourseProgress[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  description String?
  courseId    String
  parentId    String?
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  parent      Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]   @relation("FolderHierarchy")
  materials   Material[]
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Material {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        MaterialType
  url         String?
  content     String?      @db.Text
  folderId    String
  folder      Folder       @relation(fields: [folderId], references: [id], onDelete: Cascade)
  order       Int          @default(0)
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  userId    String
  courseId  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        String        @id @default(cuid())
  title     String
  content   String        @db.Text
  userId    String
  courseId  String?
  status    QuestionStatus @default(OPEN)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers   Answer[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Answer {
  id         String   @id @default(cuid())
  content    String   @db.Text
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isOfficial Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CourseProgress {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Float    @default(0)
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
}

enum UserRole {
  USER
  ADMIN
  INSTRUCTOR
}

enum SubscriptionStatus {
  FREE
  PREMIUM
  ENTERPRISE
}

enum MaterialType {
  VIDEO
  DOCUMENT
  AUDIO
  IMAGE
  LINK
  QUIZ
}

enum QuestionStatus {
  OPEN
  ANSWERED
  CLOSED
}